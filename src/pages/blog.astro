---
import BaseLayout from '../layouts/BaseLayout.astro';
import Header from '../components/Header.astro';
import Footer from '../components/Footer.astro';
import { getCollection } from 'astro:content';

const allPosts = await getCollection('blog', ({ data }) => !data.draft);
const sortedPosts = allPosts.sort((a, b) => 
  b.data.pubDate.valueOf() - a.data.pubDate.valueOf()
);

// Get unique categories for filter buttons
const categories = [...new Set(allPosts.map(post => post.data.category))];
---

<BaseLayout 
  title="Espresso Machine Reviews & Buying Guides - Home Espresso Hub"
  description="Browse our comprehensive collection of espresso machine reviews, comparisons, and buying guides for every budget and skill level."
>
  <Header />
  
  <main class="container-custom section-padding">
    <!-- Page Header -->
    <div class="text-center mb-12">
      <h1 class="text-5xl font-display font-bold text-espresso mb-4">
        Reviews & Guides
      </h1>
      <p class="text-xl text-gray-600 max-w-3xl mx-auto">
        Everything you need to know about choosing and using home espresso machines.
      </p>
    </div>

    <!-- Category Filter Buttons -->
    <div class="flex flex-wrap gap-3 justify-center mb-12">
      <button 
        class="category-filter px-6 py-2 rounded-full font-semibold transition-all active"
        data-category="all"
      >
        All Posts
      </button>
      {categories.map(category => (
        <button 
          class="category-filter px-6 py-2 rounded-full font-semibold transition-all"
          data-category={category}
        >
          {category.split('-').map(word => 
            word.charAt(0).toUpperCase() + word.slice(1)
          ).join(' ')}
        </button>
      ))}
    </div>

    <!-- Blog Posts Grid -->
    <div id="posts-container" class="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-8">
      {sortedPosts.map(post => (
        <article class="card hover:shadow-xl transition-all blog-post" data-category={post.data.category}>
          {post.data.heroImage && (
            <img 
              src={post.data.heroImage}
              alt={post.data.title}
              class="w-full h-48 object-cover rounded-lg mb-4"
            />
          )}
          
          <div class="mb-3">
            <span class="inline-block px-3 py-1 bg-latte text-espresso text-xs font-semibold rounded-full">
              {post.data.category.split('-').map(word => 
                word.charAt(0).toUpperCase() + word.slice(1)
              ).join(' ')}
            </span>
          </div>

          <h2 class="text-xl font-bold text-espresso mb-3">
            <a href={`/blog/${post.slug}`} class="hover:text-caramel transition no-underline">
              {post.data.title}
            </a>
          </h2>
          
          <p class="text-gray-600 mb-4">
            {post.data.description}
          </p>
          
          <div class="flex items-center justify-between text-sm text-gray-500 mb-4">
            <time datetime={post.data.pubDate.toISOString()}>
              {new Date(post.data.pubDate).toLocaleDateString('en-US', {
                year: 'numeric',
                month: 'long',
                day: 'numeric'
              })}
            </time>
          </div>

          <a 
            href={`/blog/${post.slug}`}
            class="text-caramel font-semibold hover:text-espresso-brown transition inline-flex items-center"
          >
            Read More 
            <svg class="w-4 h-4 ml-1" fill="none" stroke="currentColor" viewBox="0 0 24 24">
              <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 5l7 7-7 7" />
            </svg>
          </a>
        </article>
      ))}
    </div>

    <!-- No results message (hidden by default) -->
    <div id="no-results" class="hidden text-center py-12">
      <p class="text-xl text-gray-600">No posts found in this category.</p>
    </div>
  </main>

  <Footer />
</BaseLayout>

<style>
  .category-filter {
    background-color: #f5f5f5;
    color: #2C1810;
    border: 2px solid transparent;
  }

  .category-filter:hover {
    background-color: #D4A574;
    color: #2C1810;
  }

  .category-filter.active {
    background-color: #C67C4E;
    color: white;
    border-color: #C67C4E;
  }

  .blog-post.hidden {
    display: none;
  }
</style>

<script>
  // Category filtering functionality
  document.addEventListener('DOMContentLoaded', () => {
    const filterButtons = document.querySelectorAll('.category-filter');
    const blogPosts = document.querySelectorAll('.blog-post');
    const noResults = document.getElementById('no-results');
    
    // Check URL parameters on page load
    const urlParams = new URLSearchParams(window.location.search);
    const categoryParam = urlParams.get('category');
    
    if (categoryParam) {
      // Activate the correct filter button based on URL parameter
      const targetButton = document.querySelector(`[data-category="${categoryParam}"]`);
      if (targetButton) {
        filterPosts(categoryParam);
        setActiveButton(targetButton);
      }
    }

    filterButtons.forEach(button => {
      button.addEventListener('click', () => {
        const category = (button as HTMLElement).dataset.category;
        if (category) {
          filterPosts(category);
          setActiveButton(button);
          
          // Update URL without page reload
          const url = new URL(window.location.href);
          if (category === 'all') {
            url.searchParams.delete('category');
          } else {
            url.searchParams.set('category', category);
          }
          window.history.pushState({}, '', url);
        }
      });
    });

    function filterPosts(category: string) {
      let visibleCount = 0;

      blogPosts.forEach(post => {
        const postCategory = (post as HTMLElement).dataset.category;
        
        if (category === 'all' || postCategory === category) {
          post.classList.remove('hidden');
          visibleCount++;
        } else {
          post.classList.add('hidden');
        }
      });

      // Show/hide no results message
      if (visibleCount === 0) {
        noResults?.classList.remove('hidden');
      } else {
        noResults?.classList.add('hidden');
      }
    }

    function setActiveButton(activeButton: Element) {
      filterButtons.forEach(btn => btn.classList.remove('active'));
      activeButton.classList.add('active');
    }
  });
</script>