---
export interface Props {
  name: string;
  brand: string;
  price: number;
  originalPrice?: number;
  image: string;
  amazonLink: string;
  affiliateLink?: string;
  features: string[];
  rating: number;
  category: string;
  priceRange: string;
  bestFor: string;
  benefitDescription: string;
  slug: string;
  featured?: boolean;
  showCompareButton?: boolean;
  showQuickView?: boolean;
  layout?: 'card' | 'compact' | 'featured';
  showAvailability?: boolean;
}

const {
  name,
  brand,
  price,
  originalPrice,
  image,
  amazonLink,
  features,
  rating,
  category,
  priceRange,
  bestFor,
  benefitDescription,
  slug,
  featured = false,
  showCompareButton = true,
  showQuickView = true,
  showAvailability = true
} = Astro.props;

const savings = originalPrice ? originalPrice - price : 0;
const topFeatures = features.slice(0, 3);
---

<div class={`bg-cream rounded-lg shadow-lg overflow-hidden hover:shadow-xl transition-shadow duration-300 ${featured ? 'ring-2 ring-caramel' : ''}`}>
  {featured && (
    <div class="bg-caramel text-espresso text-center py-2 px-4 font-semibold">
      ‚≠ê Featured Choice
    </div>
  )}
  
  <!-- Image -->
  <div class="relative p-6 bg-white">
    <a href={`/espresso-machines/${slug}`} class="block">
      <img 
        src={image} 
        alt={name}
        class="w-full h-48 object-contain hover:scale-105 transition-transform duration-300"
        loading="lazy"
      />
    </a>
    
    <!-- Quick Info Badge -->
    <div class="absolute top-2 right-2 bg-espresso text-cream px-3 py-1 rounded-full text-sm font-medium">
      {bestFor}
    </div>
  </div>

  <!-- Content -->
  <div class="p-6">
    <!-- Brand and Name -->
    <div class="mb-3">
      <p class="text-sm text-charcoal font-medium uppercase tracking-wide">{brand}</p>
      <h3 class="text-xl font-bold text-espresso">
        <a href={`/espresso-machines/${slug}`} class="hover:text-caramel transition-colors">
          {name}
        </a>
      </h3>
    </div>

    <!-- Rating -->
    <div class="flex items-center gap-1 mb-3">
      {Array.from({ length: 5 }, (_, i) => (
        <svg
          class={`w-4 h-4 ${i < Math.floor(rating) ? 'text-yellow-400' : 'text-gray-300'}`}
          fill="currentColor"
          viewBox="0 0 20 20"
        >
          <path d="M9.049 2.927c.3-.921 1.603-.921 1.902 0l1.07 3.292a1 1 0 00.95.69h3.462c.969 0 1.371 1.24.588 1.81l-2.8 2.034a1 1 0 00-.364 1.118l1.07 3.292c.3.921-.755 1.688-1.54 1.118l-2.8-2.034a1 1 0 00-1.175 0l-2.8 2.034c-.784.57-1.838-.197-1.539-1.118l1.07-3.292a1 1 0 00-.364-1.118L2.98 8.72c-.783-.57-.38-1.81.588-1.81h3.461a1 1 0 00.951-.69l1.07-3.292z" />
        </svg>
      ))}
      <span class="text-sm text-charcoal ml-1">{rating}/5</span>
    </div>

    <!-- Description -->
    <p class="text-charcoal text-sm mb-4 line-clamp-2">
      {benefitDescription}
    </p>

    <!-- Top Features -->
    <div class="mb-4">
      <h4 class="text-sm font-semibold text-espresso mb-2">Top Features:</h4>
      <ul class="space-y-1">
        {topFeatures.map((feature) => (
          <li class="flex items-center gap-2 text-sm text-charcoal">
            <svg class="w-3 h-3 text-caramel flex-shrink-0" fill="none" stroke="currentColor" viewBox="0 0 24 24">
              <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M5 13l4 4L19 7" />
            </svg>
            {feature}
          </li>
        ))}
      </ul>
    </div>

    <!-- Category and Price Range -->
    <div class="flex justify-between text-xs text-charcoal mb-4">
      <span class="bg-latte px-2 py-1 rounded capitalize">
        {category.replace('-', ' ')}
      </span>
      <span class="bg-latte px-2 py-1 rounded capitalize">
        {priceRange.replace('-', ' ')}
      </span>
    </div>

    <!-- Price -->
    <div class="mb-4">
      <div class="flex items-center gap-2">
        <span class="text-2xl font-bold text-espresso">${price}</span>
        {originalPrice && (
          <>
            <span class="text-lg line-through text-gray-500">${originalPrice}</span>
            <span class="text-sm bg-red-100 text-red-800 px-2 py-1 rounded font-medium">
              Save ${savings}
            </span>
          </>
        )}
      </div>
    </div>

    <!-- Availability Status -->
    {showAvailability && (
      <div class="mb-4">
        <div class="flex items-center gap-2">
          <div class="w-2 h-2 bg-green-500 rounded-full"></div>
          <span class="text-sm text-green-600 font-medium">In Stock</span>
        </div>
      </div>
    )}

    <!-- Action Buttons -->
    <div class="space-y-2">
      <a 
        href={`/espresso-machines/${slug}`}
        class="block w-full bg-espresso hover:bg-charcoal text-cream text-center py-3 rounded-lg font-semibold transition-colors"
      >
        Read Review
      </a>
      
      <div class="grid grid-cols-2 gap-2">
        <a 
          href={amazonLink}
          target="_blank"
          rel="noopener noreferrer"
          class="block w-full bg-caramel hover:bg-caramel/90 text-espresso text-center py-2 rounded-lg font-medium transition-colors text-sm"
        >
          Buy Now
        </a>
        
        {showCompareButton && (
          <button 
            class="compare-btn w-full border-2 border-espresso-dark hover:bg-espresso hover:text-cream text-espresso text-center py-2 rounded-lg font-medium transition-colors text-sm"
            data-machine-slug={slug}
            data-machine-name={name}
          >
            Compare
          </button>
        )}
      </div>

      {showQuickView && (
        <button 
          class="quick-view-btn block w-full border border-gray-300 hover:border-caramel text-charcoal text-center py-2 rounded-lg font-medium transition-colors text-sm"
          data-machine-slug={slug}
        >
          Quick View
        </button>
      )}
    </div>
  </div>
</div>

<style>
  .line-clamp-2 {
    display: -webkit-box;
    -webkit-line-clamp: 2;
    -webkit-box-orient: vertical;
    overflow: hidden;
  }
</style>